<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.5" links="1">
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::SumoHSM_ctor}-->
  <operation name="SumoHSM_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>SumoHSM *me = (SumoHSM *)AO_SumoHSM;
QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;SumoHSM_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super.super, TIMEOUT_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;timeEvt_2, &amp;me-&gt;super.super, TIMEOUT_2_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;timeEvtBle, &amp;me-&gt;super.super, TIMEOUT_SEND_BLE_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;buzzerStopTimer, &amp;me-&gt;super.super, STOP_BUZZER_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;timerFailSafe, &amp;me-&gt;super.super, FAILSAFE_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;timeEvtStuck, &amp;me-&gt;super.super, STUCK_SIG, 0U);
QTimeEvt_ctorX(&amp;me-&gt;timeEvtStuckEnd, &amp;me-&gt;super.super, STUCK_END_SIG, 0U);
me-&gt;ble_counter = 0;
me-&gt;stuck_counter = 0;</code>
  </operation>
  <!--${AOs::SumoHSM}-->
  <class name="SumoHSM" superclass="qpc::QMActive">
   <!--${AOs::SumoHSM::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::timeEvt_2}-->
   <attribute name="timeEvt_2" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::timeEvtBle}-->
   <attribute name="timeEvtBle" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::timerFailSafe}-->
   <attribute name="timerFailSafe" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::buzzerStopTimer}-->
   <attribute name="buzzerStopTimer" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::timeEvtStuck}-->
   <attribute name="timeEvtStuck" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::timeEvtStuckEnd}-->
   <attribute name="timeEvtStuckEnd" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::buzzerCount}-->
   <attribute name="buzzerCount" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::ble_counter}-->
   <attribute name="ble_counter" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::stuck_counter}-->
   <attribute name="stuck_counter" type="uint8_t" visibility="0x02" properties="0x00"/>
   <!--${AOs::SumoHSM::CheckDistAndMove}-->
   <operation name="CheckDistAndMove" type="uint8_t" visibility="0x02" properties="0x00">
    <code>(void)me;
if (distance_is_active(DIST_SENSOR_F)){
    drive(100,100);
} else if (distance_is_active(DIST_SENSOR_FR) &amp;&amp; distance_is_active(DIST_SENSOR_FL)){
    drive(100,100);
} else if (distance_is_active(DIST_SENSOR_FR)) {
    drive(30,-30);
} else if (distance_is_active(DIST_SENSOR_FL)) {
    drive(-30,30);
} else if (distance_is_active(DIST_SENSOR_DR)) {
    drive(50,-50);
} else if (distance_is_active(DIST_SENSOR_DL)) {
    drive(-50,50);
} else if (distance_is_active(DIST_SENSOR_R)) {
    drive(80,-80);
} else if (distance_is_active(DIST_SENSOR_L)) {
    drive(-80,80);
} else {
   return false;
}
return true;</code>
   </operation>
   <!--${AOs::SumoHSM::CheckDistAndMoveDefense}-->
   <operation name="CheckDistAndMoveDefense" type="uint8_t" visibility="0x02" properties="0x00">
    <code>(void)me;
if (distance_is_active(DIST_SENSOR_F)&amp;&amp;
    distance_is_active(DIST_SENSOR_FR) &amp;&amp; distance_is_active(DIST_SENSOR_FL)){
    drive(100,100);
} else if (distance_is_active(DIST_SENSOR_FR) &amp;&amp; distance_is_active(DIST_SENSOR_FL)){
    drive(0,0);
    return false;
} else if (distance_is_active(DIST_SENSOR_FR)) {
    drive(30,-30);
} else if (distance_is_active(DIST_SENSOR_FL)) {
    drive(-30,30);
} else if (distance_is_active(DIST_SENSOR_DR)) {
    drive(50,-50);
} else if (distance_is_active(DIST_SENSOR_DL)) {
    drive(-50,50);
} else if (distance_is_active(DIST_SENSOR_R)) {
    drive(80,-80);
} else if (distance_is_active(DIST_SENSOR_L)) {
    drive(-80,80);
} else {
    return false;
}
return true;</code>
   </operation>
   <!--${AOs::SumoHSM::SM}-->
   <statechart properties="0x03">
    <!--${AOs::SumoHSM::SM::initial}-->
    <initial target="../1">
     <action>(void)par;

QTimeEvt_armX(&amp;me-&gt;timeEvt_2, BSP_TICKS_PER_MILISSEC * 10, 0);
me-&gt;buzzerCount = 0U;</action>
     <initial_glyph conn="95,2,5,1,-2,11,-9">
      <action box="0,-2,7,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::SumoHSM::SM::Idle}-->
    <state name="Idle">
     <entry>board_led_off();
driving_disable();
drive(0,0);
QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);

if (adc_get_low_pwr_bat()){
    led_stripe_set_all_color(COLOR_RED);
} else if (adc_get_low_ctrl_bat()){
    led_stripe_set_all_color(COLOR_ORANGE);
}</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;buzzerStopTimer);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);
buzzer_stop();

// Buzzer was not finished so  there are missing initializations
if (me-&gt;buzzerCount &lt;= 16){
    me-&gt;buzzerCount = 17;
    bsp_ble_start();
    adc_service_start_callback();
}</exit>
     <!--${AOs::SumoHSM::SM::Idle::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action brief="board_toggle_led()">board_led_toggle();</action>
      <tran_glyph conn="41,16,3,-1,18">
       <action box="0,-2,23,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::Idle::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT" target="../../3">
      <tran_glyph conn="41,43,3,3,-12,12,6">
       <action box="-24,-3,24,5"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::Idle::STOP_BUZZER}-->
     <tran trig="STOP_BUZZER">
      <action brief="buzzer_stop()">buzzer_stop();</action>
      <tran_glyph conn="41,24,3,-1,18">
       <action box="0,-2,26,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::Idle::LOW_BATTERY}-->
     <tran trig="LOW_BATTERY">
      <action brief="led_color_red">if (adc_get_low_pwr_bat()){
    led_stripe_set_all_color(COLOR_RED);
} else if (adc_get_low_ctrl_bat()){
    led_stripe_set_all_color(COLOR_ORANGE);
}
</action>
      <tran_glyph conn="41,20,3,-1,18">
       <action box="0,-2,22,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::Idle::BLE_DATA_UPDATE}-->
     <tran trig="BLE_DATA_UPDATE">
      <action>ble_rcv_packet_t last_data;
ble_service_last_packet(&amp;last_data);
param_error_t stat = parameters_update_from_ble(&amp;parameters, last_data.data);
if (stat == PARAM_OK){
    buzzer_start();
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 200);
}</action>
      <tran_glyph conn="41,35,3,-1,18">
       <action box="0,-2,21,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::Idle::BLE_DATA_REQUEST}-->
     <tran trig="BLE_DATA_REQUEST" target="../../13">
      <tran_glyph conn="41,38,3,2,-14,-26">
       <action box="0,-2,18,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::Idle::TIMEOUT_2}-->
     <tran trig="TIMEOUT_2">
      <action brief="led_stripe_and_beep()">buzzer_start();

if (me-&gt;buzzerCount &lt; 15){
    led_stripe_set_color(me-&gt;buzzerCount, COLOR_PURPLE);
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 42);
    QTimeEvt_rearm(&amp;me-&gt;timeEvt_2, BSP_TICKS_PER_MILISSEC * 84);
} else if (me-&gt;buzzerCount == 15) {
    led_stripe_set_color(me-&gt;buzzerCount, COLOR_PURPLE);
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 42);
    QTimeEvt_rearm(&amp;me-&gt;timeEvt_2, BSP_TICKS_PER_MILISSEC * 200);
} else {
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 600);
    bsp_ble_start();
    adc_service_start_callback();
    if (adc_get_low_pwr_bat()){
        led_stripe_set_all_color(COLOR_RED);
    } else if (adc_get_low_ctrl_bat()){
        led_stripe_set_all_color(COLOR_ORANGE);
    }
}
me-&gt;buzzerCount += 1;</action>
      <tran_glyph conn="41,27,3,-1,18">
       <action box="0,-2,32,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="41,1,43,43">
      <entry box="1,2,24,6"/>
      <exit box="1,8,38,4"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::RCWait}-->
    <state name="RCWait">
     <entry>board_led_off();
parameters_set_strategy_led(&amp;parameters);
parameters_set_pre_strategy_led(&amp;parameters);
drive(0,0);
driving_disable();
parameters.attack_when_near = false;
radio_service_en_radio_data_sig(true);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_SEC/10, BSP_TICKS_PER_SEC/10);
ble_service_send_string(&quot;state:RC&quot;);</entry>
     <exit brief="StopTimer">QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA}-->
     <tran trig="RADIO_DATA">
      <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA::[|ch1|or|ch2|>30]}-->
      <choice>
       <guard brief="|ch1| or |ch2|&gt; 30">(abs(radio_service_get_channel(RADIO_CH1)) &gt; 30) || (abs(radio_service_get_channel(RADIO_CH2)) &gt; 30)</guard>
       <action brief="en_motors()">driving_enable();</action>
       <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA::[|ch1|or|ch2|>30~::[0]}-->
       <choice target="../../../../12" cpref="../../../../36/0">
        <guard brief="0">parameters.pre_strategy == 0</guard>
        <choice_glyph conn="125,89,5,0,1,10">
         <action box="1,-3,6,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA::[|ch1|or|ch2|>30~::[1]}-->
       <choice target="../../../../12" cpref="../../../../36/1">
        <guard brief="1">parameters.pre_strategy == 1</guard>
        <choice_glyph conn="125,89,5,0,5,10">
         <action box="4,-3,4,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA::[|ch1|or|ch2|>30~::[2]}-->
       <choice target="../../../../12" cpref="../../../../36/2">
        <guard brief="2">parameters.pre_strategy == 2</guard>
        <choice_glyph conn="125,89,5,0,9,10">
         <action box="8,-3,4,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA::[|ch1|or|ch2|>30~::[3]}-->
       <choice target="../../../../12" cpref="../../../../36/3">
        <guard brief="3">parameters.pre_strategy == 3</guard>
        <choice_glyph conn="125,89,5,0,13,10">
         <action box="12,-3,4,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA::[|ch1|or|ch2|>30~::[4]}-->
       <choice target="../../../../12" cpref="../../../../36/4">
        <guard brief="4">parameters.pre_strategy == 4</guard>
        <choice_glyph conn="125,89,5,0,18,10">
         <action box="16,-3,4,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA::[|ch1|or|ch2|>30~::[5]}-->
       <choice target="../../../../12" cpref="../../../../36/5">
        <guard brief="5">parameters.pre_strategy == 5</guard>
        <choice_glyph conn="125,89,5,0,22,10">
         <action box="21,-3,4,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA::[|ch1|or|ch2|>30~::[6]}-->
       <choice target="../../../../12" cpref="../../../../36/6">
        <guard brief="6">parameters.pre_strategy == 6</guard>
        <choice_glyph conn="125,89,5,0,26,10">
         <action box="25,-3,4,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA::[|ch1|or|ch2|>30~::[7]}-->
       <choice target="../../../../12" cpref="../../../../36/7">
        <guard brief="7">parameters.pre_strategy == 7</guard>
        <choice_glyph conn="125,89,5,0,30,10">
         <action box="29,-3,4,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::RCWait::RADIO_DATA::[|ch1|or|ch2|>30~::[8]}-->
       <choice target="../../../../12" cpref="../../../../36/8">
        <guard brief="8">parameters.pre_strategy == 8</guard>
        <choice_glyph conn="125,89,5,0,35,10">
         <action box="34,-3,4,2"/>
        </choice_glyph>
       </choice>
       <choice_glyph conn="125,82,4,-1,7">
        <action box="-13,0,16,6"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="133,77,3,-1,-8,5">
       <action box="-11,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT" target="../../5">
      <action>parameters.attack_when_near = false;</action>
      <tran_glyph conn="164,50,1,3,83,-13,2">
       <action box="0,-2,32,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action>board_led_toggle();</action>
      <tran_glyph conn="133,48,3,-1,17">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::CHANGE_STRATEGY_EVT}-->
     <tran trig="CHANGE_STRATEGY_EVT">
      <action brief="Update Strategy">parameters_set_strategy(&amp;parameters, (parameters.strategy + 1));
parameters_set_strategy_led(&amp;parameters);</action>
      <tran_glyph conn="133,59,3,-1,19">
       <action box="0,-2,23,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::CHANGE_PRE_STRATEGY_EVT}-->
     <tran trig="CHANGE_PRE_STRATEGY_EVT">
      <action brief="Update PreStrategy">parameters_update_pre_strategy(&amp;parameters, (parameters.pre_strategy + 1));
parameters_set_pre_strategy_led(&amp;parameters);</action>
      <tran_glyph conn="133,54,3,-1,18">
       <action box="0,-2,26,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::BLE_DATA_REQUEST}-->
     <tran trig="BLE_DATA_REQUEST" target="../../15">
      <tran_glyph conn="164,32,1,1,17,-19,-18">
       <action box="0,-3,18,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::BLE_DATA_UPDATE}-->
     <tran trig="BLE_DATA_UPDATE">
      <action>ble_rcv_packet_t last_data;
ble_service_last_packet(&amp;last_data);
param_error_t stat = parameters_update_from_ble(&amp;parameters, last_data.data);
if (stat == PARAM_OK){
    buzzer_start();
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 200);
}</action>
      <tran_glyph conn="133,51,3,-1,17">
       <action box="0,-2,18,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::LINE_CHANGED_BL, LINE_CHANGED_BR~}-->
     <tran trig="LINE_CHANGED_BL, LINE_CHANGED_BR, LINE_CHANGED_FL, LINE_CHANGED_FR">
      <action brief="buzzer_on">if (adc_line_none_white()){
    buzzer_stop();
} else {
    buzzer_start();
}

parameters_report(parameters, 2);</action>
      <tran_glyph conn="133,44,5,-1,16">
       <action box="0,-2,23,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::STOP_BUZZER}-->
     <tran trig="STOP_BUZZER">
      <action brief="buzzer_stop">buzzer_stop();</action>
      <tran_glyph conn="133,40,3,-1,15">
       <action box="0,-2,17,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::DIST_SENSOR_CHANGE}-->
     <tran trig="DIST_SENSOR_CHANGE">
      <action>parameters_report(parameters, 2);</action>
      <!--${AOs::SumoHSM::SM::RCWait::DIST_SENSOR_CHAN~::[attack_when_near]}-->
      <choice target="../../../23">
       <guard brief="attack_when_near">parameters.attack_when_near &amp;&amp; distance_is_active(DIST_SENSOR_F)</guard>
       <action brief="driving_enable();">driving_enable();</action>
       <choice_glyph conn="109,72,4,0,22">
        <action box="-4,-5,17,5"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="133,72,3,-1,-24">
       <action box="0,-2,22,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RCWait::BLE_ATTACK_NEAR}-->
     <tran trig="BLE_ATTACK_NEAR">
      <action>parameters.attack_when_near = !parameters.attack_when_near;
if (parameters.attack_when_near){
    led_stripe_set_all_color(COLOR_RED);
    buzzer_start();
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 1000);
} else {
    led_stripe_set_all_color(COLOR_BLACK);
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 1000);
    buzzer_start();
}</action>
      <tran_glyph conn="133,66,3,-1,15">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="133,25,31,56">
      <entry box="1,2,14,4"/>
      <exit box="1,6,14,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::AutoWait}-->
    <state name="AutoWait">
     <entry>drive(0,0);
driving_disable();
board_led_on();
ble_service_send_string(&quot;state:AUTO&quot;);
parameters_set_strategy_led(&amp;parameters);
parameters_set_pre_strategy_led(&amp;parameters);
radio_service_en_radio_data_sig(false);
me-&gt;stuck_counter = 0;
parameters.attack_when_near = false;
start_module_enable();</entry>
     <!--${AOs::SumoHSM::SM::AutoWait::START}-->
     <tran trig="START">
      <action>driving_enable();
radio_service_disable();</action>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[ps_0]}-->
      <choice target="../../../8" cpref="../../../36/0">
       <guard brief="ps_0">parameters.pre_strategy == 0</guard>
       <choice_glyph conn="52,107,5,0,-25,6">
        <action box="-29,-3,6,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[ps_1]}-->
      <choice target="../../../8" cpref="../../../36/1">
       <guard brief="ps_1">parameters.pre_strategy == 1</guard>
       <choice_glyph conn="52,107,5,0,-20,6">
        <action box="-23,-3,7,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[ps_2]}-->
      <choice target="../../../8" cpref="../../../36/2">
       <guard brief="ps_2">parameters.pre_strategy == 2</guard>
       <choice_glyph conn="52,107,5,0,-15,6">
        <action box="-18,-3,7,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[ps_3]}-->
      <choice target="../../../8" cpref="../../../36/3">
       <guard brief="ps_3">parameters.pre_strategy == 3</guard>
       <choice_glyph conn="52,107,5,0,-10,6">
        <action box="-12,-3,6,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[ps_4]}-->
      <choice target="../../../8" cpref="../../../36/4">
       <guard brief="ps_4">parameters.pre_strategy == 4</guard>
       <choice_glyph conn="52,107,5,0,-5,6">
        <action box="-6,-3,5,3"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[ps_5]}-->
      <choice target="../../../8" cpref="../../../36/5">
       <guard brief="ps_5">parameters.pre_strategy == 5</guard>
       <choice_glyph conn="52,107,5,0,1,6">
        <action box="0,-3,5,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[ps_6]}-->
      <choice target="../../../8" cpref="../../../36/6">
       <guard brief="ps_6">parameters.pre_strategy == 6</guard>
       <choice_glyph conn="52,107,5,0,6,6">
        <action box="5,-3,6,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[ps_7]}-->
      <choice target="../../../8" cpref="../../../36/7">
       <guard brief="ps_7">parameters.pre_strategy == 7</guard>
       <choice_glyph conn="52,107,5,0,11,6">
        <action box="10,-3,6,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::AutoWait::START::[ps_8]}-->
      <choice target="../../../8" cpref="../../../36/8">
       <guard brief="ps_8">parameters.pre_strategy == 8</guard>
       <choice_glyph conn="52,107,5,0,16,6">
        <action box="15,-3,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="35,99,3,-1,17,8">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT" target="../../2">
      <action>start_module_disable();</action>
      <tran_glyph conn="71,58,1,3,31,-11,31">
       <action box="0,-2,22,5"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::CHANGE_STRATEGY_EVT}-->
     <tran trig="CHANGE_STRATEGY_EVT">
      <action brief="change_strategy">parameters_set_strategy(&amp;parameters, (parameters.strategy + 1));
parameters_set_strategy_led(&amp;parameters);</action>
      <tran_glyph conn="35,65,3,-1,11">
       <action box="0,-3,29,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::CHANGE_PRE_STRATEGY_EVT}-->
     <tran trig="CHANGE_PRE_STRATEGY_EVT">
      <action brief="change_pre_strategy">parameters_update_pre_strategy(&amp;parameters, (parameters.pre_strategy + 1));
parameters_set_pre_strategy_led(&amp;parameters);</action>
      <tran_glyph conn="35,68,3,-1,12">
       <action box="0,-2,31,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::BLE_DATA_REQUEST}-->
     <tran trig="BLE_DATA_REQUEST" target="../../14">
      <tran_glyph conn="35,75,3,2,-23,-13">
       <action box="0,-2,19,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::BLE_DATA_UPDATE}-->
     <tran trig="BLE_DATA_UPDATE">
      <action>ble_rcv_packet_t last_data;
ble_service_last_packet(&amp;last_data);
param_error_t stat = parameters_update_from_ble(&amp;parameters, last_data.data);
if (stat == PARAM_OK){
    buzzer_start();
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 200);
}</action>
      <tran_glyph conn="35,71,3,-1,14">
       <action box="0,-2,20,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::LINE_CHANGED_BL, LINE_CHANGED_BR~}-->
     <tran trig="LINE_CHANGED_BL, LINE_CHANGED_BR, LINE_CHANGED_FL, LINE_CHANGED_FR">
      <action brief="buzzer_on">if (adc_line_none_white()){
    buzzer_stop();
} else {
    buzzer_start();
}

parameters_report(parameters, 2);</action>
      <tran_glyph conn="35,79,3,-1,19">
       <action box="0,-2,34,6"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::DIST_SENSOR_CHANGE}-->
     <tran trig="DIST_SENSOR_CHANGE">
      <action>parameters_report(parameters, 2);</action>
      <!--${AOs::SumoHSM::SM::AutoWait::DIST_SENSOR_CHAN~::[attack_when_near]}-->
      <choice target="../../../8" cpref="../../../36/0">
       <guard brief="attack_when_near">parameters.attack_when_near &amp;&amp; distance_is_active(DIST_SENSOR_F)</guard>
       <action brief="driving_enable">driving_enable();
radio_service_disable();</action>
       <choice_glyph conn="19,85,5,0,-4,26,12,2">
        <action box="-3,2,14,7"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="35,85,3,-1,-16">
       <action box="0,-2,22,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::BLE_ATTACK_NEAR}-->
     <tran trig="BLE_ATTACK_NEAR">
      <action>parameters.attack_when_near = !parameters.attack_when_near;
if (parameters.attack_when_near){
    led_stripe_set_all_color(COLOR_RED);
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 1000);
    buzzer_start();
} else {
    led_stripe_set_all_color(COLOR_BLACK);
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 1000);
    buzzer_start();
}</action>
      <tran_glyph conn="35,88,3,-1,15">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoWait::STOP_BUZZER}-->
     <tran trig="STOP_BUZZER">
      <action brief="buzzer_stop()">buzzer_stop();</action>
      <tran_glyph conn="35,92,3,-1,17">
       <action box="0,-2,23,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="35,50,36,51">
      <entry box="1,2,35,8"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibTurnRight}-->
    <state name="CalibTurnRight">
     <entry brief="turn_180_right">uint32_t turn_time = BSP_TICKS_PER_MILISSEC * parameters.turn_180_right_time_ms;

QTimeEvt_rearm(&amp;me-&gt;timeEvt,  turn_time);
drive(100, -100);</entry>
     <!--${AOs::SumoHSM::SM::CalibTurnRight::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../21">
      <tran_glyph conn="218,87,3,0,-2,50">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="218,80,19,11">
      <entry box="1,2,16,3"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibWait}-->
    <state name="CalibWait">
     <entry>board_led_on();
drive(0,0);
driving_disable();
parameters_set_calib_mode_led(&amp;parameters);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);
QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 250, 0);
ble_service_send_string(&quot;state:CALIB&quot;);
radio_service_en_radio_data_sig(true);</entry>
     <exit brief="StopTimer">QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::SumoHSM::SM::CalibWait::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT" target="../../1">
      <action>led_stripe_set_all_color(COLOR_PURPLE);
ble_service_send_string(&quot;state:IDLE&quot;);</action>
      <tran_glyph conn="259,13,0,1,-11,-153,15,-22">
       <action box="-152,-10,32,7"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibWait::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action>static bool time_long;

board_led_toggle();

if (time_long){
    QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 150, 0);
} else {
    QTimeEvt_armX(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 1000, 0);
}
time_long = !time_long;

</action>
      <tran_glyph conn="249,33,3,-1,13">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibWait::CHANGE_STRATEGY_EVT}-->
     <tran trig="CHANGE_STRATEGY_EVT">
      <action brief="update_calib_mode">parameters_update_calib_mode(&amp;parameters, (parameters.calib_mode + 1));
parameters_set_calib_mode_led(&amp;parameters);</action>
      <tran_glyph conn="249,40,3,-1,13">
       <action box="0,-2,23,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibWait::BLE_DATA_REQUEST}-->
     <tran trig="BLE_DATA_REQUEST" target="../../16">
      <tran_glyph conn="275,28,1,3,17">
       <action box="0,-2,18,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibWait::BLE_DATA_UPDATE}-->
     <tran trig="BLE_DATA_UPDATE">
      <action>ble_rcv_packet_t last_data;
ble_service_last_packet(&amp;last_data);
param_error_t stat = parameters_update_from_ble(&amp;parameters, last_data.data);
if (stat == PARAM_OK){
    buzzer_start();
    QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 200);
}</action>
      <tran_glyph conn="249,29,3,-1,13">
       <action box="0,-2,19,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibWait::RADIO_DATA}-->
     <tran trig="RADIO_DATA">
      <!--${AOs::SumoHSM::SM::CalibWait::RADIO_DATA::[|ch1|or|ch2|>70]}-->
      <choice>
       <guard brief="|ch1| or |ch2|&gt; 70">(abs(radio_service_get_channel(RADIO_CH1)) &gt; 70) || (abs(radio_service_get_channel(RADIO_CH2)) &gt; 70)</guard>
       <action>driving_enable();
led_stripe_set_all_color(COLOR_RED);</action>
       <!--${AOs::SumoHSM::SM::CalibWait::RADIO_DATA::[|ch1|or|ch2|>70~::[calib_mode_0]}-->
       <choice target="../../../../4">
        <guard brief="calib_mode_0">parameters.calib_mode == 0</guard>
        <choice_glyph conn="261,67,5,0,-34,13">
         <action box="-36,-3,10,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::CalibWait::RADIO_DATA::[|ch1|or|ch2|>70~::[calib_mode_1]}-->
       <choice target="../../../../17">
        <guard brief="calib_mode_1">parameters.calib_mode == 1</guard>
        <choice_glyph conn="261,67,5,0,-8,13">
         <action box="-12,-3,10,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::CalibWait::RADIO_DATA::[|ch1|or|ch2|>70~::[calib_mode_2]}-->
       <choice target="../../../../6">
        <guard brief="calib_mode_2">parameters.calib_mode == 2</guard>
        <choice_glyph conn="261,67,5,0,25,13">
         <action box="18,-3,10,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::CalibWait::RADIO_DATA::[|ch1|or|ch2|>70~::[calib_mode_3]}-->
       <choice target="../../../../18">
        <guard brief="calib_mode_3">parameters.calib_mode == 3</guard>
        <choice_glyph conn="261,67,5,0,65,13">
         <action box="55,-3,12,2"/>
        </choice_glyph>
       </choice>
       <!--${AOs::SumoHSM::SM::CalibWait::RADIO_DATA::[|ch1|or|ch2|>70~::[calib_mode_4]}-->
       <choice target="../../../../22">
        <guard brief="calib_mode_4">parameters.calib_mode == 4</guard>
        <choice_glyph conn="261,67,5,0,113,13">
         <action box="101,-3,12,3"/>
        </choice_glyph>
       </choice>
       <choice_glyph conn="261,60,4,-1,7">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="249,49,3,-1,12,11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibWait::CHANGE_PRE_STRATEGY_EVT}-->
     <tran trig="CHANGE_PRE_STRATEGY_EVT">
      <action brief="update_parameters()">buzzer_start();
QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 100);

switch (parameters.calib_mode)
{
    case 0: {
        parameters.turn_180_right_time_ms += 10;
        if (parameters.turn_180_right_time_ms &gt; 600){
            parameters.turn_180_right_time_ms = 30;
        }
        BSP_eeprom_write(TURN_180_RIGHT_TIME_ADDR, parameters.turn_180_right_time_ms);
        break;
    }

    case 1: {
        parameters.turn_180_left_time_ms += 10;
        if (parameters.turn_180_left_time_ms &gt; 600){
            parameters.turn_180_left_time_ms = 30;
        }
        BSP_eeprom_write(TURN_180_LEFT_TIME_ADDR, parameters.turn_180_left_time_ms);
        break;
    }

    case 2: {
        // Auto calib of this parameter
        break;
    }

    case 3: {
         parameters.star_speed += 2;
        if (parameters.star_speed &gt; 98){
            parameters.star_speed = 30;
        }
        BSP_eeprom_write(STAR_SPEED_ADDR, parameters.star_speed);
        break;
    }

    case 4: {
        // Not aplicable
        break;
    }

    default: {
        break;    
    }

}</action>
      <tran_glyph conn="249,44,3,-1,18">
       <action box="0,-2,25,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibWait::STOP_BUZZER}-->
     <tran trig="STOP_BUZZER">
      <action brief="buzzer_stop">buzzer_stop();</action>
      <tran_glyph conn="249,22,3,-1,10">
       <action box="0,-2,17,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="249,13,26,40">
      <entry box="1,2,12,2"/>
      <exit box="1,4,13,3"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibFrontAt60}-->
    <state name="CalibFrontAt60">
     <entry>QTimeEvt_rearm(&amp;me-&gt;timeEvt_2, 0xFFFFFFFF);
drive(60, 60);</entry>
     <!--${AOs::SumoHSM::SM::CalibFrontAt60::LINE_CHANGED_FL, LINE_CHANGED_FR}-->
     <tran trig="LINE_CHANGED_FL, LINE_CHANGED_FR" target="../../9">
      <tran_glyph conn="270,91,3,3,-2,11,2">
       <action box="0,-2,35,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibFrontAt60::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT" target="../../21">
      <tran_glyph conn="298,80,0,0,-2,8,59">
       <action box="-7,-5,17,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="270,80,32,13">
      <entry box="1,2,29,6"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::RC_0_1}-->
    <state name="RC_0_1">
     <entry>board_led_off();</entry>
     <!--${AOs::SumoHSM::SM::RC_0_1::RADIO_DATA}-->
     <tran trig="RADIO_DATA">
      <action>QTimeEvt_disarm(&amp;me-&gt;timerFailSafe);
int coord_x = radio_service_get_channel(RADIO_CH1);
int coord_y = radio_service_get_channel(RADIO_CH2);

int mot1 = coord_y + coord_x;
int mot2 = coord_y - coord_x;

drive(mot1, mot2);

QTimeEvt_armX(&amp;me-&gt;timerFailSafe, 1 * BSP_TICKS_PER_SEC, 0);
</action>
      <tran_glyph conn="114,135,3,-1,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RC_0_1::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT">
      <!--${AOs::SumoHSM::SM::RC_0_1::CHANGE_STATE_EVT::[|ch1|and|ch2|<10]}-->
      <choice target="../../../2">
       <guard brief="|ch1| and |ch2|&lt; 10">(abs(radio_service_get_channel(RADIO_CH1)) &lt; 10) &amp;&amp; (abs(radio_service_get_channel(RADIO_CH2)) &lt; 10)</guard>
       <choice_glyph conn="173,114,4,1,-55,-9">
        <action box="-14,4,16,4"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="114,140,3,-1,21,-19,38,-7">
       <action box="0,-3,18,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RC_0_1::FAILSAFE}-->
     <tran trig="FAILSAFE">
      <action>drive(0,0);</action>
      <tran_glyph conn="114,143,3,-1,10">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RC_0_1::LINE_CHANGED_BL, LINE_CHANGED_BR}-->
     <tran trig="LINE_CHANGED_BL, LINE_CHANGED_BR">
      <!--${AOs::SumoHSM::SM::RC_0_1::LINE_CHANGED_BL,~::[strategy_1&&white]}-->
      <choice target="../../../31">
       <guard brief="strategy_1 &amp;&amp; white">parameters.strategy == 1 &amp;&amp; (adc_line_is_white(LINE_BL) || adc_line_is_white(LINE_BR))</guard>
       <choice_glyph conn="115,175,4,0,17">
        <action box="-8,0,8,3"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="114,159,3,-1,1,16">
       <action box="0,-5,16,5"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RC_0_1::LINE_CHANGED_FL, LINE_CHANGED_FR}-->
     <tran trig="LINE_CHANGED_FL, LINE_CHANGED_FR">
      <!--${AOs::SumoHSM::SM::RC_0_1::LINE_CHANGED_FL,~::[strategy_1&&white]}-->
      <choice target="../../../32">
       <guard brief="strategy_1 &amp;&amp; white">parameters.strategy == 1 &amp;&amp; (adc_line_is_white(LINE_FL) || adc_line_is_white(LINE_FR))</guard>
       <choice_glyph conn="129,176,4,0,16">
        <action box="-6,-8,8,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="114,153,3,-1,17,18,-2,5">
       <action box="0,-5,16,5"/>
      </tran_glyph>
     </tran>
     <state_glyph node="114,125,20,42">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::pre_strategy}-->
    <smstate name="pre_strategy" submachine="../36">
     <!--${AOs::SumoHSM::SM::pre_strategy::XP1}-->
     <xpseg xpref="../../36/9">
      <!--${AOs::SumoHSM::SM::pre_strategy::XP1::[strategy_0]}-->
      <choice target="../../../24">
       <guard brief="strategy_0">parameters.strategy == 0</guard>
       <choice_glyph conn="52,128,5,0,-23,6">
        <action box="-16,0,10,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::pre_strategy::XP1::[strategy_1]}-->
      <choice target="../../../27">
       <guard brief="strategy_1">parameters.strategy == 1</guard>
       <choice_glyph conn="52,128,5,0,13,6">
        <action box="3,0,10,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::pre_strategy::XP1::[else]}-->
      <choice target="../../../27">
       <guard>else</guard>
       <choice_glyph conn="52,128,5,0,21,6">
        <action box="15,0,10,2"/>
       </choice_glyph>
      </choice>
      <xpseg_glyph conn="43,123,2,-1,2,9,3">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::pre_strategy::STOP}-->
     <xpseg xpref="../../36/10" target="../../11">
      <xpseg_glyph conn="23,119,3,3,-18,107,-1,12,2">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::pre_strategy::F_LINE}-->
     <xpseg xpref="../../36/11">
      <!--${AOs::SumoHSM::SM::pre_strategy::F_LINE::[else]}-->
      <choice target="../../../29">
       <guard brief="else">else</guard>
       <choice_glyph conn="101,186,5,2,-47,-14">
        <action box="-47,-3,5,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::pre_strategy::F_LINE::[strategy_0]}-->
      <choice target="../../../25">
       <guard brief="strategy_0">parameters.strategy == 0</guard>
       <choice_glyph conn="101,186,5,2,-86,-13">
        <action box="-86,-3,10,2"/>
       </choice_glyph>
      </choice>
      <xpseg_glyph conn="57,123,2,-1,2,42,54,2,7">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="23,114,57,9"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::CalibFrontGoBack}-->
    <state name="CalibFrontGoBack">
     <entry>uint32_t time_until_line_ms = (0xFFFFFFFF - QTimeEvt_currCtr(&amp;me-&gt;timeEvt_2)) / BSP_TICKS_PER_MILISSEC ;
parameters.time_ms_to_cross_at_60_vel = time_until_line_ms;
BSP_eeprom_write(TIME_MS_TO_CROSS_AT_60_ADDR, parameters.time_ms_to_cross_at_60_vel);


drive(-parameters.reverse_speed, -parameters.reverse_speed);
uint32_t reverse_time = BSP_TICKS_PER_MILISSEC * parameters.reverse_time_ms;

QTimeEvt_rearm(&amp;me-&gt;timeEvt, reverse_time);</entry>
     <!--${AOs::SumoHSM::SM::CalibFrontGoBack::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../10">
      <tran_glyph conn="270,104,3,3,-2,9,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="270,97,32,9">
      <entry box="1,2,9,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibeFrontTurn}-->
    <state name="CalibeFrontTurn">
     <entry brief="turn">drive(100, -100);
uint16_t turn_time_ms = get_time_to_turn_ms(parameters.line_seen_turn_angle, 100, SIDE_RIGHT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, turn_time_ms * BSP_TICKS_PER_MILISSEC);</entry>
     <!--${AOs::SumoHSM::SM::CalibeFrontTurn::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../21">
      <tran_glyph conn="270,119,5,0,-2,18">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="270,111,32,10">
      <entry box="1,2,8,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::AutoEnd}-->
    <state name="AutoEnd">
     <entry brief="Disable Motors">drive(0,0);
driving_disable();
radio_service_enable();
board_led_off();
led_stripe_set_all_color(COLOR_BLACK);
ble_service_send_string(&quot;state:AUTOEND&quot;);
buzzer_start();
QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 300);
start_module_disable();</entry>
     <!--${AOs::SumoHSM::SM::AutoEnd::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT" target="../../3">
      <tran_glyph conn="6,241,3,3,-4,-146,33">
       <action box="1,-1,23,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::AutoEnd::STOP_BUZZER}-->
     <tran trig="STOP_BUZZER">
      <action brief="buzzer_stop()">buzzer_stop();</action>
      <tran_glyph conn="6,245,3,-1,24">
       <action box="0,-2,31,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="6,233,183,15">
      <entry box="1,2,12,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::pre_strategy_rc}-->
    <smstate name="pre_strategy_rc" submachine="../36">
     <!--${AOs::SumoHSM::SM::pre_strategy_rc::XP1}-->
     <xpseg xpref="../../36/9">
      <!--${AOs::SumoHSM::SM::pre_strategy_rc::XP1::[else]}-->
      <choice target="../../../7">
       <guard brief="else">else</guard>
       <choice_glyph conn="139,111,5,0,-12,14">
        <action box="-7,0,10,2"/>
       </choice_glyph>
      </choice>
      <!--${AOs::SumoHSM::SM::pre_strategy_rc::XP1::[strategy_2]}-->
      <choice target="../../../30">
       <guard brief="strategy_2">parameters.strategy == 2</guard>
       <choice_glyph conn="139,111,5,0,12,14">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <xpseg_glyph conn="139,107,2,-1,4">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::pre_strategy_rc::STOP}-->
     <xpseg xpref="../../36/10" target="../../7">
      <xpseg_glyph conn="123,104,3,0,-4,21">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::pre_strategy_rc::F_LINE}-->
     <xpseg xpref="../../36/11" target="../../34">
      <xpseg_glyph conn="150,107,2,2,2,46,93,-36,-5">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="123,100,46,7"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::ble1}-->
    <smstate name="ble1" submachine="../37">
     <!--${AOs::SumoHSM::SM::ble1::XP1}-->
     <xpseg xpref="../../37/0" target="../../1">
      <xpseg_glyph conn="32,8,1,3,9">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="15,6,17,6"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::ble2}-->
    <smstate name="ble2" submachine="../37">
     <!--${AOs::SumoHSM::SM::ble2::XP1}-->
     <xpseg xpref="../../37/0" target="../../3">
      <xpseg_glyph conn="25,58,1,3,8,2,2">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="6,56,19,6"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::ble3}-->
    <smstate name="ble3" submachine="../37">
     <!--${AOs::SumoHSM::SM::ble3::XP1}-->
     <xpseg xpref="../../37/0" target="../../2">
      <xpseg_glyph conn="163,10,1,1,20,26,-19">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="137,7,26,8"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::ble4}-->
    <smstate name="ble4" submachine="../37">
     <!--${AOs::SumoHSM::SM::ble4::XP1}-->
     <xpseg xpref="../../37/0" target="../../5">
      <xpseg_glyph conn="317,25,1,1,4,11,-46">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="292,21,25,9"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::CalibTurnLeft}-->
    <state name="CalibTurnLeft">
     <entry brief="turn_180_right">uint32_t turn_time = BSP_TICKS_PER_MILISSEC * parameters.turn_180_left_time_ms;

QTimeEvt_rearm(&amp;me-&gt;timeEvt,  turn_time);
drive(-100, 100);</entry>
     <!--${AOs::SumoHSM::SM::CalibTurnLeft::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../21">
      <tran_glyph conn="243,87,3,0,-2,50">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="243,80,19,11">
      <entry box="1,2,16,3"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibStarSpeed}-->
    <state name="CalibStarSpeed">
     <entry>drive(parameters.star_speed, parameters.star_speed);</entry>
     <!--${AOs::SumoHSM::SM::CalibStarSpeed::LINE_CHANGED_FL, LINE_CHANGED_FR}-->
     <tran trig="LINE_CHANGED_FL, LINE_CHANGED_FR" target="../../19">
      <tran_glyph conn="312,91,3,3,-3,10,2">
       <action box="0,-2,31,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibStarSpeed::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT" target="../../21">
      <tran_glyph conn="340,80,0,0,-2,9,59">
       <action box="-3,-5,18,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="312,80,31,13">
      <entry box="1,2,28,7"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibStarGoBack}-->
    <state name="CalibStarGoBack">
     <entry>drive(-parameters.reverse_speed, -parameters.reverse_speed);
uint32_t reverse_time = BSP_TICKS_PER_MILISSEC * parameters.reverse_time_ms;

QTimeEvt_rearm(&amp;me-&gt;timeEvt, reverse_time);</entry>
     <!--${AOs::SumoHSM::SM::CalibStarGoBack::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../20">
      <tran_glyph conn="311,104,3,3,-2,11,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="311,97,32,9">
      <entry box="1,2,9,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibeStarTurn}-->
    <state name="CalibeStarTurn">
     <entry brief="turn">drive(100, -100);
uint16_t turn_time_ms = get_time_to_turn_ms(parameters.line_seen_turn_angle, 100, SIDE_RIGHT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
     <!--${AOs::SumoHSM::SM::CalibeStarTurn::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../21">
      <tran_glyph conn="311,119,5,0,-2,18">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="311,111,32,10">
      <entry box="1,2,8,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibStop}-->
    <state name="CalibStop">
     <entry>drive(0,0);
driving_disable();
board_led_off();
led_stripe_set_all_color(COLOR_BLACK);
ble_service_send_string(&quot;state:CALIBEND&quot;);
buzzer_start();
QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 300);</entry>
     <!--${AOs::SumoHSM::SM::CalibStop::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT" target="../../16">
      <tran_glyph conn="412,142,1,1,26,-113,-121">
       <action box="-18,-1,19,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibStop::STOP_BUZZER}-->
     <tran trig="STOP_BUZZER">
      <action brief="buzzer_stop()">buzzer_stop();</action>
      <tran_glyph conn="211,145,3,-1,25">
       <action box="0,-2,31,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="211,137,201,10">
      <entry box="1,2,36,4"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::CalibSensors}-->
    <state name="CalibSensors">
     <entry>QTimeEvt_rearm(&amp;me-&gt;timeEvt,  BSP_TICKS_PER_MILISSEC * 100);</entry>
     <!--${AOs::SumoHSM::SM::CalibSensors::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action>QTimeEvt_rearm(&amp;me-&gt;timeEvt,  BSP_TICKS_PER_MILISSEC * 100);
report_raw_line_data_ble();</action>
      <tran_glyph conn="361,89,3,-1,14">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::CalibSensors::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT" target="../../21">
      <tran_glyph conn="361,100,3,0,-2,9,17,28">
       <action box="1,-2,18,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="361,80,26,24">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::RCAutomaticStart}-->
    <state name="RCAutomaticStart">
     <entry brief="attack">board_led_off();
drive(100,100);
uint32_t attack_timeout = 300 * BSP_TICKS_PER_MILISSEC;
QTimeEvt_rearm(&amp;me-&gt;timeEvt, attack_timeout);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);
led_stripe_set_all_color(COLOR_RED);</exit>
     <!--${AOs::SumoHSM::SM::RCAutomaticStart::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../12" cpref="../../36/0">
      <tran_glyph conn="99,105,3,0,15,-8,12,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="99,94,17,13">
      <entry box="1,2,12,4"/>
      <exit box="1,6,6,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::StarAuto}-->
    <smstate name="StarAuto" submachine="../38">
     <!--${AOs::SumoHSM::SM::StarAuto::XP1}-->
     <xpseg xpref="../../38/0" target="../../11">
      <xpseg_glyph conn="13,153,3,0,-3,80">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::StarAuto::LINE_FRONT}-->
     <xpseg xpref="../../38/1" target="../../25">
      <xpseg_glyph conn="22,155,2,0,11">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::StarAuto::LINE_BACK}-->
     <xpseg xpref="../../38/2" target="../../26">
      <xpseg_glyph conn="35,155,2,0,11">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="13,134,30,21"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::LineFStar}-->
    <smstate name="LineFStar" submachine="../35">
     <!--${AOs::SumoHSM::SM::LineFStar::STOP}-->
     <xpseg xpref="../../35/1" target="../../11">
      <xpseg_glyph conn="24,173,2,0,60">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::LineFStar::XP1}-->
     <xpseg xpref="../../35/0" target="../../24">
      <xpseg_glyph conn="25,166,0,2,-11">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="13,166,14,7"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::LineBStar}-->
    <smstate name="LineBStar" submachine="../39">
     <!--${AOs::SumoHSM::SM::LineBStar::XP1}-->
     <xpseg xpref="../../39/0" target="../../24">
      <xpseg_glyph conn="38,166,0,2,-11">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::LineBStar::STOP}-->
     <xpseg xpref="../../39/1" target="../../11">
      <xpseg_glyph conn="38,173,2,0,60">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="29,166,13,7"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::StepsAuto}-->
    <smstate name="StepsAuto" submachine="../40">
     <!--${AOs::SumoHSM::SM::StepsAuto::LINE_FRONT}-->
     <xpseg xpref="../../40/1" target="../../29">
      <xpseg_glyph conn="61,155,2,0,10">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::StepsAuto::LINE_BACK}-->
     <xpseg xpref="../../40/0" target="../../28">
      <xpseg_glyph conn="76,155,2,0,10">
       <action box="0,1,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::StepsAuto::STOP}-->
     <xpseg xpref="../../40/2" target="../../11">
      <xpseg_glyph conn="51,152,3,0,-4,81">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="51,134,37,21"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::StepsBL}-->
    <smstate name="StepsBL" submachine="../39">
     <!--${AOs::SumoHSM::SM::StepsBL::XP1}-->
     <xpseg xpref="../../39/0" target="../../27">
      <xpseg_glyph conn="82,165,0,2,-10">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::StepsBL::STOP}-->
     <xpseg xpref="../../39/1" target="../../11">
      <xpseg_glyph conn="82,172,2,0,61">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="72,165,15,7"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::StepsFL}-->
    <smstate name="StepsFL" submachine="../35">
     <!--${AOs::SumoHSM::SM::StepsFL::XP1}-->
     <xpseg xpref="../../35/0" target="../../27">
      <xpseg_glyph conn="65,165,0,2,-10">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::StepsFL::STOP}-->
     <xpseg xpref="../../35/1" target="../../11">
      <xpseg_glyph conn="64,172,2,0,61">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="52,165,15,7"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::RC_2}-->
    <state name="RC_2">
     <entry>board_led_off();</entry>
     <!--${AOs::SumoHSM::SM::RC_2::RADIO_DATA}-->
     <tran trig="RADIO_DATA">
      <action>QTimeEvt_disarm(&amp;me-&gt;timerFailSafe);
int coord_x = radio_service_get_channel(RADIO_CH1);
int coord_y = radio_service_get_channel(RADIO_CH2);

int mot1 = coord_y + coord_x;
int mot2 = coord_y - coord_x;


// Auto if coord &gt; y
if (coord_y &gt;= 60) {
    bool seeing = SumoHSM_CheckDistAndMove(me);
    if (!seeing){
        drive(parameters.star_speed, parameters.star_speed);
    }
} else {
    drive(mot1, mot2);
}



QTimeEvt_armX(&amp;me-&gt;timerFailSafe, 1 * BSP_TICKS_PER_SEC, 0);</action>
      <tran_glyph conn="143,135,3,-1,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RC_2::CHANGE_STATE_EVT}-->
     <tran trig="CHANGE_STATE_EVT">
      <!--${AOs::SumoHSM::SM::RC_2::CHANGE_STATE_EVT::[|ch1|and|ch2|<10]}-->
      <choice target="../../../2">
       <guard brief="|ch1| and |ch2|&lt; 10">(abs(radio_service_get_channel(RADIO_CH1)) &lt; 10) &amp;&amp; (abs(radio_service_get_channel(RADIO_CH2)) &lt; 10)</guard>
       <choice_glyph conn="188,115,4,1,-41,-24">
        <action box="-12,-44,16,4"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="168,138,1,-1,20,-23">
       <action box="1,-3,17,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RC_2::LINE_CHANGED_FL, LINE_CHANGED_FR}-->
     <tran trig="LINE_CHANGED_FL, LINE_CHANGED_FR">
      <action>if (parameters.strategy &gt; 0){
    if (adc_line_is_white(LINE_FL)){
        drive(-100, -100);
    } else if (adc_line_is_white(LINE_FR)){
        drive(-100, -100);
    }

}</action>
      <!--${AOs::SumoHSM::SM::RC_2::LINE_CHANGED_FL,~::[white]}-->
      <choice target="../../../34">
       <guard brief="white">adc_line_is_white(LINE_FL) || adc_line_is_white(LINE_FR)</guard>
       <choice_glyph conn="165,152,4,0,37,2,2">
        <action box="-5,-5,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="143,144,3,-1,22,8">
       <action box="0,-2,18,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RC_2::FAILSAFE}-->
     <tran trig="FAILSAFE">
      <action>drive(0,0);</action>
      <tran_glyph conn="143,137,3,-1,12">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::RC_2::LINE_CHANGED_BL, LINE_CHANGED_BR}-->
     <tran trig="LINE_CHANGED_BL, LINE_CHANGED_BR">
      <!--${AOs::SumoHSM::SM::RC_2::LINE_CHANGED_BL,~::[white]}-->
      <choice target="../../../33">
       <guard brief="white">adc_line_is_white(LINE_BL) || adc_line_is_white(LINE_BR)</guard>
       <choice_glyph conn="160,161,5,0,-8,17">
        <action box="-8,-3,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="143,153,3,-1,17,8">
       <action box="0,-2,16,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="143,125,25,42">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::LineBackRC}-->
    <state name="LineBackRC">
     <entry>drive(100,100);
uint32_t advance_time = BSP_TICKS_PER_MILISSEC * 100;
QTimeEvt_rearm(&amp;me-&gt;timeEvt, advance_time);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::SumoHSM::SM::LineBackRC::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../7">
      <tran_glyph conn="121,192,0,2,-25">
       <action box="-6,2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="110,192,13,8">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::LineFrontRC}-->
    <state name="LineFrontRC">
     <entry>drive(-100,-100);
uint32_t reverse_time = BSP_TICKS_PER_MILISSEC * parameters.reverse_time_ms;
QTimeEvt_rearm(&amp;me-&gt;timeEvt, reverse_time);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::SumoHSM::SM::LineFrontRC::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../7">
      <tran_glyph conn="136,192,0,1,-43,-2">
       <action box="-6,2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="125,192,13,8">
      <entry box="1,2,5,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <!--${AOs::SumoHSM::SM::LineB_RC}-->
    <smstate name="LineB_RC" submachine="../39">
     <!--${AOs::SumoHSM::SM::LineB_RC::XP1}-->
     <xpseg xpref="../../39/0" target="../../30">
      <xpseg_glyph conn="155,178,0,2,-11">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::LineB_RC::STOP}-->
     <xpseg xpref="../../39/1" target="../../30">
      <xpseg_glyph conn="155,184,2,2,3,7,-20">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="142,178,19,6"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::LineF_RC}-->
    <smstate name="LineF_RC" submachine="../35">
     <!--${AOs::SumoHSM::SM::LineF_RC::XP1}-->
     <xpseg xpref="../../35/0" target="../../30">
      <xpseg_glyph conn="170,191,0,1,-26,-2">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <!--${AOs::SumoHSM::SM::LineF_RC::STOP}-->
     <xpseg xpref="../../35/1" target="../../30">
      <xpseg_glyph conn="169,197,2,1,2,6,-36,-7">
       <action box="1,0,10,2"/>
      </xpseg_glyph>
     </xpseg>
     <smstate_glyph node="154,191,19,6"/>
    </smstate>
    <!--${AOs::SumoHSM::SM::LineFrontSubmachine}-->
    <submachine name="LineFrontSubmachine">
     <entry>QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);</exit>
     <!--${AOs::SumoHSM::SM::LineFrontSubmach~::XP-XP1}-->
     <xp name="XP1">
      <xp_glyph point="72,2,0">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::LineFrontSubmach~::XP-STOP}-->
     <xp name="STOP">
      <xp_glyph point="65,63,2">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::LineFrontSubmach~::initial}-->
     <initial target="../3">
      <initial_glyph conn="6,6,5,0,11,3">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineGoBack}-->
     <state name="LineGoBack">
      <entry brief="go_back">drive(-parameters.reverse_speed, -parameters.reverse_speed);

uint32_t reverse_time = BSP_TICKS_PER_MILISSEC * parameters.reverse_time_ms;

if (adc_line_is_white(LINE_FL)){
    QTimeEvt_rearm(&amp;me-&gt;timeEvt, reverse_time);
} else {
    QTimeEvt_rearm(&amp;me-&gt;timeEvt_2, reverse_time);
}</entry>
      <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineGoBack::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../4">
       <tran_glyph conn="7,25,3,0,9,7">
        <action box="0,-2,16,4"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineGoBack::STOP}-->
      <tran trig="STOP" target="../.." cpref="../../1">
       <tran_glyph conn="61,17,1,2,4,45">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineGoBack::TIMEOUT_2}-->
      <tran trig="TIMEOUT_2" target="../../5">
       <tran_glyph conn="7,21,3,0,38,11">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineGoBack::LINE_CHANGED_BL, LINE_CHANGED_BR}-->
      <tran trig="LINE_CHANGED_BL, LINE_CHANGED_BR" target="../.." cpref="../../0">
       <tran_glyph conn="7,16,3,0,52,-8,13,-5">
        <action box="0,-2,19,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="7,9,54,19">
       <entry box="1,2,16,3"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineTurnRight}-->
     <state name="LineTurnRight">
      <entry brief="turn right">drive(100, -100);
uint16_t turn_time_ms = get_time_to_turn_ms(parameters.line_seen_turn_angle, 100, SIDE_RIGHT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <exit>drive(0,0);</exit>
      <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineTurnRight::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../0">
       <tran_glyph conn="10,44,3,0,62,-41">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineTurnRight::DIST_SENSOR_CHANGE}-->
      <tran trig="DIST_SENSOR_CHANGE" target="../.." cpref="../../0">
       <tran_glyph conn="10,48,3,0,62,-45">
        <action box="0,-2,23,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineTurnRight::STOP}-->
      <tran trig="STOP" target="../.." cpref="../../1">
       <action>drive(0,0);</action>
       <tran_glyph conn="18,54,2,2,5,47,3">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="10,32,21,22">
       <entry box="1,2,10,2"/>
       <exit box="1,4,18,4"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineTurnLeft}-->
     <state name="LineTurnLeft">
      <entry brief="turn left">drive(-100, 100);
uint16_t turn_time_ms = get_time_to_turn_ms(parameters.line_seen_turn_angle, 100, SIDE_LEFT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <exit>drive(0,0);</exit>
      <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineTurnLeft::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../0">
       <tran_glyph conn="38,45,3,0,34,-42">
        <action box="0,-3,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineTurnLeft::DIST_SENSOR_CHANGE}-->
      <tran trig="DIST_SENSOR_CHANGE" target="../.." cpref="../../0">
       <tran_glyph conn="38,51,3,0,34,-48">
        <action box="0,-2,23,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::LineFrontSubmach~::LineTurnLeft::STOP}-->
      <tran trig="STOP" target="../.." cpref="../../1">
       <action>drive(0,0);</action>
       <tran_glyph conn="54,54,2,2,2,11,6">
        <action box="-4,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="38,32,21,22">
       <entry box="1,2,10,2"/>
       <exit box="1,4,18,4"/>
      </state_glyph>
     </state>
     <submachine_diagram size="81,61">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </submachine_diagram>
    </submachine>
    <!--${AOs::SumoHSM::SM::PreStrategy}-->
    <submachine name="PreStrategy">
     <entry brief="Disable_timers">QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);
led_stripe_set_all_color(COLOR_RED);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);</exit>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP0}-->
     <epseg name="EP0" target="../14">
      <epseg_glyph conn="19,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP1}-->
     <epseg name="EP1" target="../22">
      <epseg_glyph conn="41,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP2}-->
     <epseg name="EP2" target="../17">
      <epseg_glyph conn="65,2,0,0,6,1,2">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP3}-->
     <epseg name="EP3" target="../15">
      <epseg_glyph conn="89,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP4}-->
     <epseg name="EP4" target="../16">
      <epseg_glyph conn="113,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP5}-->
     <epseg name="EP5" target="../23">
      <epseg_glyph conn="137,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP6}-->
     <epseg name="EP6" target="../27">
      <epseg_glyph conn="161,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP7}-->
     <epseg name="EP7" target="../26">
      <epseg_glyph conn="185,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::EP-EP8}-->
     <epseg name="EP8" target="../30">
      <epseg_glyph conn="209,2,0,0,8">
       <name box="1,-2,10,2"/>
       <action box="1,0,10,2"/>
      </epseg_glyph>
     </epseg>
     <!--${AOs::SumoHSM::SM::PreStrategy::XP-XP1}-->
     <xp name="XP1">
      <xp_glyph point="91,74,2">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::PreStrategy::XP-STOP}-->
     <xp name="STOP">
      <xp_glyph point="2,39,3">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::PreStrategy::XP-F_LINE}-->
     <xp name="F_LINE">
      <xp_glyph point="156,74,2">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::PreStrategy::STOP}-->
     <tran trig="STOP" target=".." cpref="../10">
      <tran_glyph conn="2,45,3,3,3,-6,-2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::PreStrategy::LINE_CHANGED_FL, LINE_CHANGED_FR}-->
     <tran trig="LINE_CHANGED_FL, LINE_CHANGED_FR">
      <!--${AOs::SumoHSM::SM::PreStrategy::LINE_CHANGED_FL,~::[white]}-->
      <choice target="../.." cpref="../../11">
       <guard brief="white">adc_line_is_white(LINE_FL) || adc_line_is_white(LINE_FR)</guard>
       <choice_glyph conn="29,63,4,2,3,127,7">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,63,3,-1,27">
       <action box="0,-2,21,5"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_0}-->
     <state name="PreStrategy_0">
      <entry brief="motor_on">drive(100,100);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * 10);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_0::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../9">
       <tran_glyph conn="8,20,3,2,-2,40,85,13">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="8,10,18,44">
       <entry box="1,2,14,4"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_3}-->
     <state name="PreStrategy_3">
      <entry brief="turn_right">drive(100,-100);
uint16_t turn_time_ms = get_time_to_turn_ms(80, 100, SIDE_RIGHT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_3::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../19">
       <tran_glyph conn="80,18,3,0,9,8">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="80,10,18,12">
       <entry box="1,2,15,3"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_4}-->
     <state name="PreStrategy_4">
      <entry brief="motor_back">drive(-45,-45);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_4::LINE_CHANGED_BL, LINE_CHANGED_BR}-->
      <tran trig="LINE_CHANGED_BL, LINE_CHANGED_BR" target="../../35">
       <tran_glyph conn="104,18,3,0,15,7">
        <action box="0,-2,19,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="104,10,18,12">
       <entry box="1,2,14,3"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_2}-->
     <state name="PreStrategy_2">
      <entry brief="turn_left">drive(-100,100);
uint16_t turn_time_ms = get_time_to_turn_ms(80, 100, SIDE_LEFT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_2::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../21">
       <tran_glyph conn="57,19,3,0,12,7">
        <action box="0,-2,16,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="57,10,18,12">
       <entry box="1,2,16,4"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_3_sub2}-->
     <state name="PreStrategy_3_sub2">
      <entry brief="turn_left">drive(-100,100);
uint16_t turn_time_ms = get_time_to_turn_ms(150, 100, SIDE_LEFT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_3_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../9">
       <tran_glyph conn="80,50,3,2,11,23">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="80,42,18,12">
       <entry box="1,2,12,3"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_3_sub1}-->
     <state name="PreStrategy_3_sub1">
      <entry brief="motor_front">drive(100,100);
uint16_t move_time_ms = get_time_to_move_ms(70, 100, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * move_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_3_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../18">
       <tran_glyph conn="80,34,3,0,10,8">
        <action box="0,-2,17,6"/>
       </tran_glyph>
      </tran>
      <state_glyph node="80,26,18,12">
       <entry box="1,2,12,3"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_2_sub2}-->
     <state name="PreStrategy_2_sub2">
      <entry brief="turn_right">drive(100,-100);
uint16_t turn_time_ms = get_time_to_turn_ms(150, 100, SIDE_RIGHT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_2_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../9">
       <tran_glyph conn="56,50,3,2,11,10,24,13">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="56,42,18,12">
       <entry box="1,2,12,3"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_2_sub1}-->
     <state name="PreStrategy_2_sub1">
      <entry brief="motor_front">drive(100,100);
uint16_t move_time_ms = get_time_to_move_ms(70, 100, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * move_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_2_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../20">
       <tran_glyph conn="56,34,3,0,13,8">
        <action box="0,-2,19,6"/>
       </tran_glyph>
      </tran>
      <state_glyph node="56,26,18,12">
       <entry box="1,2,15,4"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1}-->
     <state name="PreStrategy_1">
      <entry brief="custom_strategy">cust_strategy_reset();
uint8_t current_step = cust_strategy_current_step();
movement_t first_step = cust_strategy_move_type(current_step);

uint16_t movement_delay_ms;
uint16_t movement_parameter = cust_strategy_move(current_step);
switch (first_step) {
    case MOVE_FRONT: {
        drive(100,100);
        movement_delay_ms = get_time_to_move_ms(movement_parameter, 100, &amp;parameters);
        break;
    }
    case MOVE_BACK: {
        drive(-100,-100);
        movement_delay_ms = get_time_to_move_ms(movement_parameter, 100, &amp;parameters);
        break;
    }
    case MOVE_LEFT: {
        drive(-100,100);
        movement_delay_ms = get_time_to_turn_ms(movement_parameter, 100, SIDE_LEFT, &amp;parameters);
        break;
    }
    case MOVE_RIGHT: {
        drive(100,-100);
        movement_delay_ms = get_time_to_turn_ms(movement_parameter, 100, SIDE_RIGHT, &amp;parameters);
        break;
    }
    default: {
        drive(0,0);
        movement_delay_ms = 10;
        break;
    }
}

QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * movement_delay_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1::TIMEOUT}-->
      <tran trig="TIMEOUT">
       <action>cust_strategy_increase_step();
uint8_t current_step = cust_strategy_current_step();
movement_t step = cust_strategy_move_type(current_step);
uint16_t movement_delay_ms;
uint16_t movement_parameter = cust_strategy_move(current_step);
switch (step) {
    case MOVE_FRONT: {
        drive(100,100);
        movement_delay_ms = get_time_to_move_ms(movement_parameter, 100, &amp;parameters);
        break;
    }
    case MOVE_BACK: {
        drive(-100,-100);
        movement_delay_ms = get_time_to_move_ms(movement_parameter, 100, &amp;parameters);
        break;
    }
    case MOVE_LEFT: {
        drive(-100,100);
        movement_delay_ms = get_time_to_turn_ms(movement_parameter, 100, SIDE_LEFT, &amp;parameters);
        break;
    }
    case MOVE_RIGHT: {
        drive(100,-100);
        movement_delay_ms = get_time_to_turn_ms(movement_parameter, 100, SIDE_RIGHT, &amp;parameters);
        break;
    }
    default: {
        drive(0,0);
        movement_delay_ms = 10;
        break;
    }
}

if (current_step &gt;= cust_strategy_num_steps() - 1){
    QTimeEvt_rearm(&amp;me-&gt;timeEvt_2, BSP_TICKS_PER_MILISSEC * movement_delay_ms);
} else {
    QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * movement_delay_ms);
}


</action>
       <tran_glyph conn="32,19,3,-1,10">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1::TIMEOUT_2}-->
      <tran trig="TIMEOUT_2" target="../.." cpref="../../9">
       <tran_glyph conn="32,33,3,2,-2,27,61,13">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1::LINE_CHANGED_BL, LINE_CHANGED_BR}-->
      <tran trig="LINE_CHANGED_BL, LINE_CHANGED_BR" target="../../36">
       <tran_glyph conn="32,42,3,0,15,6">
        <action box="0,-2,17,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="32,10,18,36">
       <entry box="1,2,15,4"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5}-->
     <state name="PreStrategy_5">
      <entry brief="turn_left">drive(-100,100);
uint16_t turn_time_ms = get_time_to_turn_ms(100, 100, SIDE_LEFT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../24">
       <tran_glyph conn="128,16,3,0,9,5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="128,10,18,7">
       <entry box="1,2,14,3"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5_sub1}-->
     <state name="PreStrategy_5_sub1">
      <entry brief="go_front">drive(100,100);
uint16_t move_time_ms = get_time_to_move_ms(60, 100, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * move_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../25">
       <tran_glyph conn="128,27,3,0,9,4">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="128,21,18,7">
       <entry box="1,2,13,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5_sub2}-->
     <state name="PreStrategy_5_sub2">
      <entry brief="turn_right">drive(100,-100);
uint16_t turn_time_ms = get_time_to_turn_ms(100, 100, SIDE_RIGHT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../37">
       <tran_glyph conn="128,37,3,0,7,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="128,31,18,7">
       <entry box="1,2,14,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_7}-->
     <state name="PreStrategy_7">
      <entry brief="turn_right">drive(100,-100);
uint16_t turn_time_ms = get_time_to_turn_ms(80, 100, SIDE_RIGHT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_7::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../29">
       <tran_glyph conn="176,18,3,0,14,8">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="176,10,18,12">
       <entry box="1,2,15,3"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_6}-->
     <state name="PreStrategy_6">
      <entry brief="turn_left">drive(-100,100);
uint16_t turn_time_ms = get_time_to_turn_ms(80, 100, SIDE_LEFT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_6::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../28">
       <tran_glyph conn="152,19,3,0,13,7">
        <action box="0,-2,16,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="152,10,18,12">
       <entry box="1,2,16,4"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_6_sub1}-->
     <state name="PreStrategy_6_sub1">
      <entry brief="arc_right">drive(80,50);
uint16_t move_time_ms = get_time_to_move_ms(110, 100, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * move_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_6_su~::TIMEOUT, LINE_CHANGED_FL, LINE_C~}-->
      <tran trig="TIMEOUT, LINE_CHANGED_FL, LINE_CHANGED_FR" target="../../31">
       <tran_glyph conn="152,34,3,0,12,8">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="152,26,18,12">
       <entry box="1,2,11,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_7_sub1}-->
     <state name="PreStrategy_7_sub1">
      <entry brief="arc_left">drive(50,80);
uint16_t move_time_ms = get_time_to_move_ms(110, 100, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * move_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_7_su~::TIMEOUT, LINE_CHANGED_FL, LINE_C~}-->
      <tran trig="TIMEOUT, LINE_CHANGED_FL, LINE_CHANGED_FR" target="../../32">
       <tran_glyph conn="176,34,3,0,11,8">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="176,26,18,12">
       <entry box="1,2,11,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_8}-->
     <state name="PreStrategy_8">
      <entry brief="turn_left_180">drive(-100,100);
uint16_t turn_time_ms = get_time_to_turn_ms(180, 100, SIDE_LEFT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_8::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../9">
       <tran_glyph conn="200,18,3,2,9,48,-118,7">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="200,10,18,12">
       <entry box="1,2,15,3"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_6_sub2}-->
     <state name="PreStrategy_6_sub2">
      <entry brief="turn_right">drive(100,-100);
uint16_t turn_time_ms = get_time_to_turn_ms(20, 100, SIDE_RIGHT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_6_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../9">
       <tran_glyph conn="152,50,3,2,10,16,-71,7">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="152,42,18,12">
       <entry box="1,2,14,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_7_sub2}-->
     <state name="PreStrategy_7_sub2">
      <entry brief="turn_left">drive(-100,100);
uint16_t turn_time_ms = get_time_to_turn_ms(20, 100, SIDE_LEFT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_7_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../9">
       <tran_glyph conn="176,50,3,2,10,16,-95,7">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="176,42,18,12">
       <entry box="1,2,14,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5_sub4}-->
     <state name="PreStrategy_5_sub4">
      <entry brief="go_front">drive(100,100);
uint16_t move_time_ms = get_time_to_move_ms(90, 100, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * move_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../34">
       <tran_glyph conn="128,53,3,0,9,4">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="128,47,18,7">
       <entry box="1,2,13,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5_sub5}-->
     <state name="PreStrategy_5_sub5">
      <entry brief="turn_right">drive(100,-100);
uint16_t turn_time_ms = get_time_to_turn_ms(30, 100, SIDE_LEFT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../9">
       <tran_glyph conn="128,63,3,2,9,7,-46,3">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="128,57,18,7">
       <entry box="1,2,14,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_4_sub1}-->
     <state name="PreStrategy_4_sub1">
      <entry brief="go_front">drive(100,100);
uint16_t move_time_ms = get_time_to_move_ms(23, 100, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * move_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_4_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../9">
       <tran_glyph conn="104,31,3,2,8,29,-21,13">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="104,25,18,7">
       <entry box="1,2,13,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1_sub1}-->
     <state name="PreStrategy_1_sub1">
      <entry brief="go_front">drive(100,100);
uint16_t move_time_ms = get_time_to_move_ms(15, 100, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * move_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_1_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../.." cpref="../../9">
       <tran_glyph conn="32,54,3,2,8,6,51,13">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="32,48,18,7">
       <entry box="1,2,13,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5_sub3}-->
     <state name="PreStrategy_5_sub3">
      <entry brief="turnLeft">drive(-100,100);
uint16_t turn_time_ms = get_time_to_turn_ms(20, 100, SIDE_LEFT, &amp;parameters);
QTimeEvt_rearm(&amp;me-&gt;timeEvt, BSP_TICKS_PER_MILISSEC * turn_time_ms);</entry>
      <!--${AOs::SumoHSM::SM::PreStrategy::PreStrategy_5_su~::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../33">
       <tran_glyph conn="128,45,3,0,9,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="128,39,18,7">
       <entry box="1,2,12,3"/>
      </state_glyph>
     </state>
     <submachine_diagram size="260,72">
      <entry box="1,2,22,4"/>
      <exit box="1,6,6,2"/>
     </submachine_diagram>
    </submachine>
    <!--${AOs::SumoHSM::SM::BLESubmachine}-->
    <submachine name="BLESubmachine">
     <entry brief="Prepare Timers">QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);
QTimeEvt_disarm(&amp;me-&gt;timeEvtBle);

me-&gt;ble_counter = 0;
QTimeEvt_armX(&amp;me-&gt;timeEvtBle, BSP_TICKS_PER_MILISSEC * 10, 0);</entry>
     <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);
QTimeEvt_disarm(&amp;me-&gt;timeEvtBle);</exit>
     <!--${AOs::SumoHSM::SM::BLESubmachine::XP-XP1}-->
     <xp name="XP1">
      <xp_glyph point="60,20,1">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::BLESubmachine::TIMEOUT_SEND_BLE}-->
     <tran trig="TIMEOUT_SEND_BLE">
      <action brief="report_params()">if (me-&gt;ble_counter &lt; (BLE_TRANSMIT_NUM_OF_PACKETS - 1)){
    parameters_report(parameters, me-&gt;ble_counter);
    QTimeEvt_armX(&amp;me-&gt;timeEvtBle, BSP_TICKS_PER_MILISSEC * 60, 0);
    me-&gt;ble_counter++;
} else {
    parameters_report(parameters, (BLE_TRANSMIT_NUM_OF_PACKETS - 1));
    QTimeEvt_armX(&amp;me-&gt;timeEvt_2, BSP_TICKS_PER_MILISSEC * 60, 0);
}

</action>
      <tran_glyph conn="2,15,3,-1,23">
       <action box="0,-2,26,5"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::BLESubmachine::TIMEOUT_2}-->
     <tran trig="TIMEOUT_2" target=".." cpref="../0">
      <tran_glyph conn="2,20,3,1,57">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <submachine_diagram size="58,45">
      <entry box="1,2,27,3"/>
      <exit box="1,5,6,2"/>
     </submachine_diagram>
    </submachine>
    <!--${AOs::SumoHSM::SM::StarStrategy}-->
    <submachine name="StarStrategy">
     <entry brief="PlayBuzzer">buzzer_start();
QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 100);
me-&gt;stuck_counter = 0;</entry>
     <exit brief="DisableTimers">QTimeEvt_disarm(&amp;me-&gt;timeEvtStuck);
QTimeEvt_disarm(&amp;me-&gt;timeEvtStuckEnd);
QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);</exit>
     <!--${AOs::SumoHSM::SM::StarStrategy::XP-XP1}-->
     <xp name="XP1">
      <xp_glyph point="2,67,3">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::StarStrategy::XP-LINE_FRONT}-->
     <xp name="LINE_FRONT">
      <xp_glyph point="49,73,2">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::StarStrategy::XP-LINE_BACK}-->
     <xp name="LINE_BACK">
      <xp_glyph point="112,73,2">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::StarStrategy::initial}-->
     <initial target="../8">
      <initial_glyph conn="74,9,5,0,-8,13">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${AOs::SumoHSM::SM::StarStrategy::LINE_CHANGED_FL, LINE_CHANGED_FR}-->
     <tran trig="LINE_CHANGED_FL, LINE_CHANGED_FR">
      <!--${AOs::SumoHSM::SM::StarStrategy::LINE_CHANGED_FL,~::[white]}-->
      <choice target="../.." cpref="../../1">
       <guard brief="white">adc_line_is_white(LINE_FL) || adc_line_is_white(LINE_FR)</guard>
       <choice_glyph conn="28,52,5,2,3,18,18,2">
        <action box="2,-3,7,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,52,3,-1,26">
       <action box="0,-2,21,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StarStrategy::STOP_BUZZER}-->
     <tran trig="STOP_BUZZER">
      <action brief="buzzer_stop()">buzzer_stop();</action>
      <tran_glyph conn="2,16,3,-1,22">
       <action box="0,-2,23,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StarStrategy::LINE_CHANGED_BL, LINE_CHANGED_BR}-->
     <tran trig="LINE_CHANGED_BL, LINE_CHANGED_BR">
      <!--${AOs::SumoHSM::SM::StarStrategy::LINE_CHANGED_BL,~::[white]}-->
      <choice target="../.." cpref="../../2">
       <guard brief="white">adc_line_is_white(LINE_BL) || adc_line_is_white(LINE_BR)</guard>
       <choice_glyph conn="29,47,5,2,8,21,75,4">
        <action box="2,-3,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,47,3,-1,27">
       <action box="0,-5,17,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StarStrategy::STOP}-->
     <tran trig="STOP" target=".." cpref="../0">
      <tran_glyph conn="2,63,3,3,5,4,-4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StarStrategy::SearchAndAttack}-->
     <state name="SearchAndAttack">
      <entry brief="CheckSensors and Move">bool seeing = SumoHSM_CheckDistAndMove(me);
if (seeing) {
    QTimeEvt_rearm(&amp;me-&gt;timeEvtStuck, BSP_TICKS_PER_MILISSEC * parameters.is_stucked_timeout_ms);
} else {
    drive(parameters.star_speed, parameters.star_speed);
    QTimeEvt_disarm(&amp;me-&gt;timeEvtStuck);
}
</entry>
      <exit brief="Disable timer stuck">QTimeEvt_disarm(&amp;me-&gt;timeEvtStuck);</exit>
      <!--${AOs::SumoHSM::SM::StarStrategy::SearchAndAttack::DIST_SENSOR_CHANGE}-->
      <tran trig="DIST_SENSOR_CHANGE" target="..">
       <tran_glyph conn="56,34,3,2,-12,6,20,-3">
        <action box="-19,-3,21,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::StarStrategy::SearchAndAttack::STUCK}-->
      <tran trig="STUCK" target="../../9">
       <tran_glyph conn="81,29,1,3,18">
        <action box="5,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="56,22,25,15">
       <entry box="1,2,24,5"/>
       <exit box="1,7,22,4"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::StarStrategy::Stuck}-->
     <state name="Stuck">
      <entry>uint16_t move_time_ms;

if (me-&gt;stuck_counter &gt;= 2){
    drive(-100,-20);
    move_time_ms = get_time_to_move_ms(60, 100, &amp;parameters);
    me-&gt;stuck_counter = 0;
} else {
    drive(-100,-100);
    move_time_ms = get_time_to_move_ms(40, 100, &amp;parameters);
    me-&gt;stuck_counter++;
}


QTimeEvt_rearm(&amp;me-&gt;timeEvtStuckEnd, BSP_TICKS_PER_MILISSEC * move_time_ms);</entry>
      <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvtStuckEnd);</exit>
      <!--${AOs::SumoHSM::SM::StarStrategy::Stuck::STUCK_END}-->
      <tran trig="STUCK_END" target="../../8">
       <tran_glyph conn="99,34,3,1,-18">
        <action box="-15,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="99,22,25,15">
       <entry box="1,2,7,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <submachine_diagram size="149,71">
      <entry box="1,2,21,3"/>
      <exit box="1,5,19,2"/>
     </submachine_diagram>
    </submachine>
    <!--${AOs::SumoHSM::SM::LineBackSubmachine}-->
    <submachine name="LineBackSubmachine">
     <entry brief="go_front">drive(100, 100);
uint32_t advance_time = BSP_TICKS_PER_MILISSEC * 100;
QTimeEvt_rearm(&amp;me-&gt;timeEvt, advance_time);</entry>
     <exit brief="disarm_timer">QTimeEvt_disarm(&amp;me-&gt;timeEvt);</exit>
     <!--${AOs::SumoHSM::SM::LineBackSubmachi~::XP-XP1}-->
     <xp name="XP1">
      <xp_glyph point="45,2,0">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::LineBackSubmachi~::XP-STOP}-->
     <xp name="STOP">
      <xp_glyph point="44,32,2">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::LineBackSubmachi~::STOP}-->
     <tran trig="STOP" target=".." cpref="../1">
      <tran_glyph conn="2,26,3,2,42,5">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::LineBackSubmachi~::TIMEOUT}-->
     <tran trig="TIMEOUT" target=".." cpref="../0">
      <tran_glyph conn="2,12,3,0,43,-9">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::LineBackSubmachi~::LINE_CHANGED_FL, LINE_CHANGED_FR}-->
     <tran trig="LINE_CHANGED_FL, LINE_CHANGED_FR" target=".." cpref="../0">
      <tran_glyph conn="2,17,3,0,43,-14">
       <action box="0,-2,35,2"/>
      </tran_glyph>
     </tran>
     <submachine_diagram size="62,30">
      <entry box="1,2,14,2"/>
      <exit box="1,4,19,3"/>
     </submachine_diagram>
    </submachine>
    <!--${AOs::SumoHSM::SM::StepsStrategy}-->
    <submachine name="StepsStrategy">
     <entry brief="play_buzzer">buzzer_start();
QTimeEvt_rearm(&amp;me-&gt;buzzerStopTimer, BSP_TICKS_PER_MILISSEC * 100);
me-&gt;stuck_counter = 0;</entry>
     <exit brief="disarm_timers">QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);
QTimeEvt_disarm(&amp;me-&gt;timeEvtStuck);
QTimeEvt_disarm(&amp;me-&gt;timeEvtStuckEnd);</exit>
     <!--${AOs::SumoHSM::SM::StepsStrategy::XP-LINE_BACK}-->
     <xp name="LINE_BACK">
      <xp_glyph point="81,57,2">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::StepsStrategy::XP-LINE_FRONT}-->
     <xp name="LINE_FRONT">
      <xp_glyph point="33,57,2">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::StepsStrategy::XP-STOP}-->
     <xp name="STOP">
      <xp_glyph point="2,49,3">
       <name box="1,-2,10,2"/>
      </xp_glyph>
     </xp>
     <!--${AOs::SumoHSM::SM::StepsStrategy::initial}-->
     <initial target="../8">
      <initial_glyph conn="39,7,5,0,11,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <!--${AOs::SumoHSM::SM::StepsStrategy::STOP_BUZZER}-->
     <tran trig="STOP_BUZZER">
      <action brief="buzzer_stop()">buzzer_stop();</action>
      <tran_glyph conn="2,15,3,-1,15">
       <action box="0,-2,22,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StepsStrategy::LINE_CHANGED_BL, LINE_CHANGED_BR}-->
     <tran trig="LINE_CHANGED_BL, LINE_CHANGED_BR">
      <!--${AOs::SumoHSM::SM::StepsStrategy::LINE_CHANGED_BL,~::[white]}-->
      <choice target="../.." cpref="../../0">
       <guard brief="white">adc_line_is_white(LINE_BL) || adc_line_is_white(LINE_BR)</guard>
       <choice_glyph conn="20,26,5,2,7,24,54,6">
        <action box="-2,-4,6,3"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,26,3,-1,18">
       <action box="0,-2,16,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StepsStrategy::LINE_CHANGED_FL, LINE_CHANGED_FR}-->
     <tran trig="LINE_CHANGED_FL, LINE_CHANGED_FR">
      <!--${AOs::SumoHSM::SM::StepsStrategy::LINE_CHANGED_FL,~::[white]}-->
      <choice target="../.." cpref="../../1">
       <guard brief="white">adc_line_is_white(LINE_FL) || adc_line_is_white(LINE_FR)</guard>
       <choice_glyph conn="21,38,4,2,15,12,3">
        <action box="-3,-4,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,38,3,-1,19">
       <action box="0,-2,18,5"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StepsStrategy::STOP}-->
     <tran trig="STOP" target=".." cpref="../2">
      <tran_glyph conn="2,43,3,3,7,6,-6">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::SumoHSM::SM::StepsStrategy::SearchAndAttack}-->
     <state name="SearchAndAttack">
      <entry>bool seeing;
if (parameters.strategy == 1){
    seeing = SumoHSM_CheckDistAndMove(me);
} else {
    seeing = SumoHSM_CheckDistAndMoveDefense(me);
}


if (seeing) {
    QTimeEvt_disarm(&amp;me-&gt;timeEvt);
    QTimeEvt_rearm(&amp;me-&gt;timeEvtStuck, BSP_TICKS_PER_MILISSEC * parameters.is_stucked_timeout_ms);
} else {
    drive(0,0);
    QTimeEvt_disarm(&amp;me-&gt;timeEvtStuck);
    uint32_t small_step_wait = parameters.step_wait_time_ms * BSP_TICKS_PER_MILISSEC;
    QTimeEvt_rearm(&amp;me-&gt;timeEvt, small_step_wait);
}
</entry>
      <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt);
QTimeEvt_disarm(&amp;me-&gt;timeEvtStuck);</exit>
      <!--${AOs::SumoHSM::SM::StepsStrategy::SearchAndAttack::TIMEOUT}-->
      <tran trig="TIMEOUT" target="../../9">
       <tran_glyph conn="42,22,3,0,11,9">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::StepsStrategy::SearchAndAttack::STUCK}-->
      <tran trig="STUCK" target="../../10">
       <tran_glyph conn="66,16,1,3,25">
        <action box="9,-2,10,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::StepsStrategy::SearchAndAttack::DIST_SENSOR_CHANGE}-->
      <tran trig="DIST_SENSOR_CHANGE" target="..">
       <tran_glyph conn="66,24,1,1,20,-6,-20">
        <action box="0,-2,19,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="42,11,24,14">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::StepsStrategy::StepAdvance}-->
     <state name="StepAdvance">
      <entry>drive(100,100);
uint32_t small_step_advance_time = parameters.step_advance_time_ms * BSP_TICKS_PER_MILISSEC;
QTimeEvt_rearm(&amp;me-&gt;timeEvt_2, small_step_advance_time);</entry>
      <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvt_2);</exit>
      <!--${AOs::SumoHSM::SM::StepsStrategy::StepAdvance::TIMEOUT_2, DIST_SENSOR_CHANGE}-->
      <tran trig="TIMEOUT_2, DIST_SENSOR_CHANGE" target="../../8">
       <tran_glyph conn="42,40,3,3,-5,-23,5">
        <action box="0,-2,24,5"/>
       </tran_glyph>
      </tran>
      <state_glyph node="42,31,23,13">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::StepsStrategy::Stuck}-->
     <state name="Stuck">
      <entry>uint16_t move_time_ms;

if (me-&gt;stuck_counter &gt;= 2){
    drive(-100,-20);
    move_time_ms = get_time_to_move_ms(60, 100, &amp;parameters);
    me-&gt;stuck_counter = 0;
} else {
    drive(-100,-100);
    move_time_ms = get_time_to_move_ms(40, 100, &amp;parameters);
    me-&gt;stuck_counter++;
}


QTimeEvt_rearm(&amp;me-&gt;timeEvtStuckEnd, BSP_TICKS_PER_MILISSEC * move_time_ms);</entry>
      <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvtStuckEnd);</exit>
      <!--${AOs::SumoHSM::SM::StepsStrategy::Stuck::STUCK_END}-->
      <tran trig="STUCK_END" target="../../11">
       <tran_glyph conn="101,25,2,0,5">
        <action box="1,2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="91,11,23,14">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <!--${AOs::SumoHSM::SM::StepsStrategy::StarSearch}-->
     <state name="StarSearch">
      <entry>bool seeing;
if (parameters.strategy == 1){
    seeing = SumoHSM_CheckDistAndMove(me);
} else {
    seeing = SumoHSM_CheckDistAndMoveDefense(me);
}
if (seeing) {
    QTimeEvt_rearm(&amp;me-&gt;timeEvtStuck, BSP_TICKS_PER_MILISSEC * parameters.is_stucked_timeout_ms);
} else {
    drive(parameters.star_speed, parameters.star_speed);
    QTimeEvt_disarm(&amp;me-&gt;timeEvtStuck);
}
</entry>
      <exit>QTimeEvt_disarm(&amp;me-&gt;timeEvtStuck);</exit>
      <!--${AOs::SumoHSM::SM::StepsStrategy::StarSearch::STUCK}-->
      <tran trig="STUCK" target="../../10">
       <tran_glyph conn="96,30,0,2,-5">
        <action box="-7,-4,7,2"/>
       </tran_glyph>
      </tran>
      <!--${AOs::SumoHSM::SM::StepsStrategy::StarSearch::DIST_SENSOR_CHANGE}-->
      <tran trig="DIST_SENSOR_CHANGE" target="..">
       <tran_glyph conn="90,37,3,3,-20,3,20">
        <action box="-20,1,19,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="90,30,25,14">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <submachine_diagram size="117,55">
      <entry box="1,2,23,3"/>
      <exit box="1,5,19,2"/>
     </submachine_diagram>
    </submachine>
    <state_diagram size="548,259"/>
   </statechart>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::src}-->
  <directory name="src">
   <!--${.::src::sumo_hsm.c}-->
   <file name="sumo_hsm.c">
    <text>#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;
#include &quot;qf_custom_defines.h&quot;
#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &quot;led_service.h&quot;
#include &quot;driving_service.h&quot;
#include &quot;buzzer_service.h&quot;
#include &quot;radio_service.h&quot;
#include &quot;distance_service.h&quot;
#include &quot;adc_service.h&quot;
#include &quot;bsp_eeprom.h&quot;
#include &quot;ble_service.h&quot;
#include &quot;parameters.h&quot;
#include &quot;custom_strategy.h&quot;
#include &quot;start_module.h&quot;


#define CALIB_ANGLE_MULT    2.5
#ifndef M_PI
#define M_PI                3.14159265
#endif

static sumo_parameters_t parameters;

/* ask QM to declare the Blinky class --------------------------------------*/
$declare${AOs::SumoHSM}


/* instantiate the Blinky active object ------------------------------------*/
static SumoHSM l_sumo_hsm;
QActive * const AO_SumoHSM = &amp;l_sumo_hsm.super.super;


// Needs to be called in the beggining of the program, so that we don't have problems accessing the eeprom
void sumo_parameters_init(){
    parameters_init(&amp;parameters);
}

/* ask QM to define the Blinky class ---------------------------------------*/
$define${AOs::SumoHSM_ctor}



$define${AOs::SumoHSM}

#ifdef Q_SPY

void sumoHSM_update_qs_dict(){

    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.timeEvt);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.buzzerStopTimer);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.buzzerCount);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.timeEvt_2);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.timeEvtBle);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.timerFailSafe);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.timeEvtStuck);
    QS_OBJ_DICTIONARY(&amp;l_sumo_hsm.timeEvtStuckEnd);


    QS_SIG_DICTIONARY(TIMEOUT_SIG,     (void *)0);
    QS_SIG_DICTIONARY(TIMEOUT_2_SIG, (void *)0);
    QS_SIG_DICTIONARY(STOP_BUZZER_SIG,    (void *)0);
    QS_SIG_DICTIONARY(START_SIG,  (void *)0);
    QS_SIG_DICTIONARY(CHANGE_STATE_EVT_SIG,  (void *)0);
    QS_SIG_DICTIONARY(CHANGE_STRATEGY_EVT_SIG,  (void *)0);
    QS_SIG_DICTIONARY(CHANGE_PRE_STRATEGY_EVT_SIG,  (void *)0);
    QS_SIG_DICTIONARY(STOP_SIG,  (void *)0);
    QS_SIG_DICTIONARY(LINE_CHANGED_FL_SIG,  (void *)0);
    QS_SIG_DICTIONARY(LINE_CHANGED_FR_SIG,  (void *)0);
    QS_SIG_DICTIONARY(LINE_CHANGED_BL_SIG,  (void *)0);
    QS_SIG_DICTIONARY(LINE_CHANGED_BR_SIG,  (void *)0);
    QS_SIG_DICTIONARY(DIST_SENSOR_CHANGE_SIG,  (void *)0);
    QS_SIG_DICTIONARY(RADIO_DATA_SIG,  (void *)0);
    QS_SIG_DICTIONARY(BUTTON_SIG,  (void *)0);
    QS_SIG_DICTIONARY(BLE_DATA_UPDATE_SIG,  (void *)0);
    QS_SIG_DICTIONARY(BLE_DATA_REQUEST_SIG,  (void *)0);
    QS_SIG_DICTIONARY(LOW_BATTERY_SIG,  (void *)0);
    QS_SIG_DICTIONARY(TIMEOUT_SEND_BLE_SIG,  (void *)0);
    QS_SIG_DICTIONARY(FAILSAFE_SIG,  (void *)0);
    QS_SIG_DICTIONARY(STUCK_SIG,  (void *)0);
    QS_SIG_DICTIONARY(STUCK_END_SIG,  (void *)0);
    QS_SIG_DICTIONARY(BLE_ATTACK_NEAR_SIG,  (void *)0);

}

#endif</text>
   </file>
   <!--${.::src::main.c}-->
   <file name="main.c">
    <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &quot;app.h&quot;

Q_DEFINE_THIS_FILE

/* the main function -------------------------------------------------------*/
int main() {
    static QEvt const *sumoHSM_queueSto[10]; /* event queue buffer for SumoHSM */

    QF_init();  /* initialize the framework */
    BSP_init(); /* initialize the BSP */
    sumo_parameters_init();
    APP_init();

    /* instantiate and start the SumoHSM active object */
    SumoHSM_ctor(); /* in C you must explicitly call the SumoHSM constructor */
    
    #ifdef Q_SPY
    sumoHSM_update_qs_dict();
    #endif

    QACTIVE_START(AO_SumoHSM, /* active object to start */
        2U,                  /* priority of the active object */
        sumoHSM_queueSto,     /* event queue buffer */
        Q_DIM(sumoHSM_queueSto), /* the length of the buffer */
        (void *)0, 0U,       /* private stack (not used) */
        (QEvt *)0);          /* initialization event (not used) */

    return QF_run(); /* let the framework run the application */
}</text>
   </file>
  </directory>
  <!--${.::inc}-->
  <directory name="inc">
   <!--${.::inc::bsp.h}-->
   <file name="bsp.h">
    <text>#ifndef BSP_H
#define BSP_H

#include &quot;qpc.h&quot;

/* a very simple Board Support Package (BSP) -------------------------------*/
enum { 
    BSP_TICKS_PER_SEC = 100
}; /* number of clock ticks in a second */

typedef enum {
    SIMULATOR = 100, //QS_USER0 on qs.h file. only useful on Qspy config
} qs_user_names_t;


#define BSP_TICKS_PER_MILISSEC (BSP_TICKS_PER_SEC/1000.0)

void BSP_init(void);

/* define the event signals used in the application ------------------------*/
enum SumoHSMSignals {
    TIMEOUT_SIG = Q_USER_SIG, /* offset the first signal by Q_USER_SIG */
    TIMEOUT_2_SIG,
    STOP_BUZZER_SIG,
    START_SIG,
    STOP_SIG,
    CHANGE_STATE_EVT_SIG,
    CHANGE_STRATEGY_EVT_SIG,
    CHANGE_PRE_STRATEGY_EVT_SIG,
    LINE_CHANGED_FL_SIG,
    LINE_CHANGED_FR_SIG,
    LINE_CHANGED_BL_SIG,
    LINE_CHANGED_BR_SIG,
    DIST_SENSOR_CHANGE_SIG,
    RADIO_DATA_SIG,
    BUTTON_SIG,
    BLE_DATA_UPDATE_SIG,
    BLE_DATA_REQUEST_SIG,
    LOW_BATTERY_SIG,
    TIMEOUT_SEND_BLE_SIG,
    FAILSAFE_SIG,
    STUCK_SIG,
    STUCK_END_SIG,
    BLE_ATTACK_NEAR_SIG,
    MAX_SIG, /* keep last (the number of signals) */
};

/* active object(s) used in this application -------------------------------*/
extern QActive * const AO_SumoHSM; /* opaque pointer to the SumoHSM AO */
$declare${AOs::SumoHSM_ctor}

void sumo_parameters_init(void);

#ifdef Q_SPY
void sumoHSM_update_qs_dict(void);
#endif

#endif /* BSP_H */</text>
   </file>
  </directory>
 </directory>
</model>
